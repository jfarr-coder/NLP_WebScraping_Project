  train, test, train_labels, test_labels = train_test_split(features,
                                                          labels,
                                                          test_size=0.33,
                                                          random_state=42)
    

    #print(train)
    #print(train_labels)
    #print(test)
    #print(test_labels)

    TfidfVectorizer= TfidfVectorizer()
    count_vect = CountVectorizer()
    X_train_counts = count_vect.fit_transform(train['Headline'])
    print(X_train_counts.shape)
    tfidf_transformer = TfidfTransformer()
    X_train_tfidf = tfidf_transformer.fit_transform(X_train_counts) # DO NOT USE (SVM, Decistion Trees)

        #SVM
    #https://scikit-learn.org/stable/modules/svm.html
    #https://www.datacamp.com/community/tutorials/svm-classification-scikit-learn-python
    #https://towardsdatascience.com/support-vector-machines-explained-with-python-examples-cb65e8172c85
    #Decision Trees
    #https://scikit-learn.org/stable/modules/tree.html
    #https://www.w3schools.com/python/python_ml_decision_tree.asp
    #https://www.datacamp.com/community/tutorials/decision-tree-classification-python
    #https://www.geeksforgeeks.org/decision-tree-implementation-python/
    #SVM Decision Trees
    #https://towardsdatascience.com/a-complete-view-of-decision-trees-and-svm-in-machine-learning-f9f3d19a337b
    #https://towardsdatascience.com/ensemble-learning-with-support-vector-machines-and-decision-trees-88f8a1b5f84b
    #https://www.numpyninja.com/post/a-simple-introduction-to-decision-tree-and-support-vector-machines-svm
    #https://www.codementor.io/blog/text-classification-6mmol0q8oj
    #https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html
    #print(X_train_tfidf)
    #clf = MultinomialNB().fit(X_train_tfidf, X_train_counts)
    #print(clf)


                # removing stop words from wordList
            #wordsList = [w for w in wordsList if not w in stop_words]
    
            #  Using a Tagger. Which is part-of-speech
            # tagger or POS-tagger.
            #tagged = nltk.pos_tag(wordsList)
            #for t in tagged:
            #    terms.append(t[1])